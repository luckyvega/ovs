#! /usr/bin/env python
# Copyright (C) 2013 Nicira, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Limitations:
#     - Doesn't support multicast other than "unknown-dst"

import argparse
import netaddr
from pyroute2 import IPDB
import os
import re
import shlex
import subprocess
import sys
import time
import types

import ovs.dirs
import ovs.util
import ovs.daemon
import ovs.unixctl.server
import ovs.vlog
from six.moves import range
import six


VERSION = "0.99.1"

root_prefix = ""

__pychecker__ = 'no-reuseattr'  # Remove in pychecker >= 0.8.19.
vlog = ovs.vlog.Vlog("ovs-vtep")
exiting = False

ps_name = ""
ps_type = ""
Tunnel_Ips = list()
#Tunnel_Ip = list()
Lswitches = {}
Bindings = {}
ls_count = 0
tun_id = 0
bfd_bridge = "vtep_bfd"
bfd_ref = {}
database = None
auto_flood = False
df_fragment = True
arp_responder = False

def call_prog(prog, args_list):
    cmd = [prog, "-vconsole:off"] + args_list
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
    if len(output) == 0 or output[0] is None:
        output = ""
    else:
        output = output[0].strip()
    return output


def ovs_vsctl(args):
    return call_prog("ovs-vsctl", shlex.split(args))


def ovs_ofctl(args):
    return call_prog("ovs-ofctl", shlex.split(args))


def vtep_ctl(args):
    args_list = shlex.split(args)
    if database is not None:
        args_list = [database] + args_list
    return call_prog("vtep-ctl", args_list)


def unixctl_exit(conn, unused_argv, unused_aux):
    global exiting
    exiting = True
    conn.reply(None)


class Logical_Switch(object):
    def __init__(self, ls_name):
        global ls_count
        self.name = ls_name
        ls_count += 1
        self.short_name = "vtep_ls" + str(ls_count)
        vlog.info("creating lswitch %s (%s)" % (self.name, self.short_name))
        self.ports = {}
        # tunnel = { key = dest_ip, value = (ovs_port_no, tun_name, tunnel['dest_ip'])) }
        self.tunnels = {}
        self.local_macs = set()
        self.remote_macs = {}
        self.unknown_dsts = set()
        self.tunnel_key = 0
        self.setup_ls()

    def __del__(self):
        vlog.info("destroying lswitch %s" % self.name)

    def setup_ls(self):
        column = vtep_ctl("--columns=tunnel_key find Logical_Switch "
                              "name=%s" % self.name)
        tunnel_key = column.partition(":")[2].strip()
        if tunnel_key and isinstance(eval(tunnel_key), types.IntType):
            self.tunnel_key = tunnel_key
            vlog.info("using tunnel key %s in %s"
                      % (self.tunnel_key, self.name))
        else:
            self.tunnel_key = 0
            vlog.warn("invalid tunnel key for %s, using 0" % self.name)

        if ps_type:
            ovs_vsctl("--may-exist add-br %s -- set Bridge %s datapath_type=%s"
                      % (self.short_name, self.short_name, ps_type))
        else:
            ovs_vsctl("--may-exist add-br %s" % self.short_name)

        ovs_vsctl("br-set-external-id %s vtep_logical_switch true"
                  % self.short_name)
        ovs_vsctl("br-set-external-id %s logical_switch_name %s"
                  % (self.short_name, self.name))

        vtep_ctl("clear-local-macs %s" % self.name)
        for tunnel_ip in Tunnel_Ips:
            vlog.info("local tunnel ip %s" % tunnel_ip)
            vtep_ctl("add-mcast-local %s unknown-dst %s" % (self.name,
                     tunnel_ip))

        ovs_ofctl("del-flows %s" % self.short_name)
        ovs_ofctl("add-flow %s table=0,priority=0,action=drop" %
                self.short_name)

    def cleanup_ls(self):
        for port_no, tun_name, remote_ip in six.itervalues(self.tunnels):
            del_bfd(dequote(remote_ip))

    def tunnel_ports(self,tunnel_list):
        outbound_ports = list()
        inbound_ports = list()
        phy_ports = self.ports.values()
        vlog.info("phy_ports = %s" % phy_ports)
        vlog.info("tunnel_list = %s" % tunnel_list)
        for tunnel in tunnel_list:
            vlog.info("tunnel = %s port = %s" % (tunnel,
                self.tunnels[tunnel][0]))
            if self.tunnels[tunnel][3]:
                outbound_ports.append(self.tunnels[tunnel][0])
                continue
            inbound_ports.append(self.tunnels[tunnel][0])
        return outbound_ports,inbound_ports

    def update_flood(self):
        outbound_ports,inbound_ports = None,None
        global auto_flood
        if auto_flood:
            outbound_ports,inbound_ports = self.tunnel_ports(
                    self.tunnels.keys())
        else:
            # consider only explict flood ports
            outbound_ports,inbound_ports = self.tunnel_ports(self.unknown_dsts)

        vlog.info("outbound  ports = %s, inblound ports = %s" %(outbound_ports,
                   inbound_ports))
        # Traffic coming from physical port should be flooded to all inbound,
        # outbound  and other physical ports that belong to that
        # VTEP logical switch.
        flood_ports = inbound_ports + outbound_ports
        phy_ports = self.ports.values()
        if flood_ports or len(phy_ports) > 1:
            for port_no in phy_ports:
                out_ports = list()
                out_ports = phy_ports
                out_ports.remove(port_no)
                out_ports = flood_ports + out_ports
                ovs_ofctl("add-flow %s table=1,in_port=%s,priority=1,action=%s"
                          % (self.short_name,port_no,
                          ",".join(out_ports)))
                vlog.info("%s added flood from %s to %s" % (self.short_name,
                          port_no,out_ports))
        # Traffic flowing from inbound port should be flooded
        # to the outbound ports and physical ports
        flood_ports = self.ports.values() + outbound_ports
        if flood_ports:
            for port_no in inbound_ports:
                ovs_ofctl("add-flow %s table=1,priority=9,in_port=%s,action=%s"
                          % (self.short_name, port_no,
                          ",".join(flood_ports)))
                vlog.info("%s added flood from %s to %s" %
                          (self.short_name, port_no,flood_ports))

        # Traffic flowing from outbound port should be flooded
        # to inbound ports and physical ports
        flood_ports = self.ports.values() + inbound_ports
        if flood_ports:
            for port_no in outbound_ports:
                ovs_ofctl("add-flow %s table=1,priority=9,in_port=%s,action=%s"
                          % (self.short_name, port_no,
                          ",".join(flood_ports)))
                vlog.info("%s added flood from %s to %s" % (self.short_name,
                          port_no,flood_ports))


    def add_lbinding(self, lbinding):
        vlog.info("adding %s binding to %s" % (lbinding, self.name))
        port_no = ovs_vsctl("get Interface %s ofport" % lbinding)
        self.ports[lbinding] = port_no
        ovs_ofctl("add-flow %s table=0,in_port=%s,priority=10,action=learn(table=1,"
                  "priority=900,idle_timeout=15,cookie=0x5000,"
                  "NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],"
                  "output:NXM_OF_IN_PORT[]),resubmit(,1)"
                  % (self.short_name, port_no))

        self.update_flood()

    def del_lbinding(self, lbinding):
        vlog.info("removing %s binding from %s" % (lbinding, self.name))
        port_no = self.ports[lbinding]
        ovs_ofctl("del-flows %s in_port=%s" % (self.short_name, port_no))
        del self.ports[lbinding]
        self.update_flood()

    # tunnel is a dict { tunnel_type: xx, dest_ip: x.x.x.x, tunnel_key: kk }
    def add_tunnel(self, tunnel):
        global tun_id
        tunnel_key = tunnel['tunnel_key']
        local = False
        if not tunnel_key:
            tunnel_key = self.tunnel_key
            local = True
        vlog.info("%s{%s} adding %s tunnel type %s  dest_ip = %s key = %s" % (
                  'local' if local else 'outer',
                  self.short_name,
                  self.name,
                  tunnel['tunnel_type'],
                  tunnel['dest_ip'],
                  tunnel_key))

        if 'tunnel_type' not in tunnel.keys():
            vlog.warn("tunnel format %s unspecified for " % tunnel['dest_ip'])
            return

        if "vxlan_over_ipv4" != tunnel['tunnel_type']:
            vlog.warn("unsupported tunnel format %s" % tunnel['tunnel_type'])
            return

        tun_id += 1
        tun_name = "vx" + str(tun_id)

        global df_fragment
        ovs_vsctl("add-port %s %s -- set Interface %s type=vxlan "
                "options:key=%s options:remote_ip=%s options:df_default=%s"
                  % (self.short_name, tun_name,
                     tun_name, tunnel_key, tunnel['dest_ip'],
                     'true' if df_fragment else 'false'))

        port_no = ovs_vsctl("get Interface %s ofport" % tun_name)
        if port_no == "-1":
                vlog.warn("couldn't create tunnel %s" % tunnel)
                ovs_vsctl("del-port %s %s" % (self.short_name, tun_name))
                return

        # Give the system a moment to allocate the port number
        time.sleep(0.5)
        vlog.info("tunnel => %s is on port %s" % (tunnel['dest_ip'],port_no))
        self.tunnels[tunnel['dest_ip']] = (port_no,
                                           tun_name,
                                           tunnel['dest_ip'],
                                           tunnel['tunnel_key'])

        add_bfd(tunnel['dest_ip'])
        ovs_ofctl("add-flow %s table=0,in_port=%s,priority=100,"
                  "action=learn(table=1,"
                  "priority=700,idle_timeout=15,cookie=0x5000,"
                  "NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],"
                  "output:NXM_OF_IN_PORT[]),resubmit(,1)"
                  % (self.short_name, port_no))
        vlog.info("added mac learn rule for tunnel[%s], at port %s"
                  % (tunnel['dest_ip'],port_no))
        ovs_ofctl("add-flow %s table=0,priority=10,in_port=%s,"
                  "actions=resubmit(,1)"
                  % (self.short_name, port_no))
        vlog.info("add flow resubmit to table 1 ,tunnel => %s is on port %s"
                % (tunnel['dest_ip'],port_no))

       
    def del_tunnel(self, tunnel):
        vlog.info("removing tunnel %s" % tunnel)
        if tunnel not in self.tunnels.keys():
            vlog.info("tunnel %s has not been created yet")
            return
        port_no, tun_name, remote_ip, tunnel_key = self.tunnels[tunnel]
        ovs_ofctl("del-flows %s table=0,in_port=%s"
                    % (self.short_name, port_no))
        ovs_ofctl("del-flows %s table=1,in_port=%s"
                    % (self.short_name, port_no))
        ovs_vsctl("del-port %s %s" % (self.short_name, tun_name))

        del_bfd(remote_ip)

        del self.tunnels[tunnel]

    def update_local_macs(self):
        flows = ovs_ofctl("dump-flows %s cookie=0x5000/-1,table=1"
                          % self.short_name).splitlines()
        macs = set()
        for f in flows:
            mac = re.split(r'.*dl_dst=(.*) .*', f)
            if len(mac) == 3:
                macs.add(mac[1])

        for mac in macs.difference(self.local_macs):
            vlog.info("adding local ucast %s to %s" % (mac, self.name))
            vtep_ctl("add-ucast-local %s %s %s" % (self.name, mac,
                                                   Tunnel_Ips[0]))
        #TODO fix parsing to reflect correct tunnel ip
        for mac in self.local_macs.difference(macs):
            vlog.info("removing local ucast %s from %s" % (mac, self.name))
            vtep_ctl("del-ucast-local %s %s" % (self.name, mac))

        self.local_macs = macs

    def add_remote_mac(self, mac, tunnel):
        port_no = self.tunnels.get(tunnel, (0, ""))[0]
        if not port_no:
            return

        ovs_ofctl("add-flow %s table=1,priority=1000,dl_dst=%s,action=%s"
                  % (self.short_name, mac, port_no))
        global arp_responder
        if arp_responder == False:
            return

        ipaddr =  vtep_ctl( '--columns=ipaddr find Ucast_Macs_Remote MAC=\'"%s"\''
                           % mac).replace('\"','').split(':')[1].strip()
        if ipaddr:
            mac = netaddr.EUI(mac, dialect=netaddr.mac_unix)
            ip = netaddr.IPAddress(ipaddr)

            ovs_ofctl("add-flow %(br_name)s \"table=1,priority=10,dl_type=0x0806, "
                      "nw_dst=%(ip)s,actions=move:NXM_OF_ETH_SRC[]->NXM_OF_ETH_DST[], mod_dl_src:%(mac)s, "
                      "load:0x2->NXM_OF_ARP_OP[], move:NXM_NX_ARP_SHA[]->NXM_NX_ARP_THA[], "
                      "move:NXM_OF_ARP_SPA[]->NXM_OF_ARP_TPA[], "
                      "load:%(mac)#x->NXM_NX_ARP_SHA[], load:%(ip)#x->NXM_OF_ARP_SPA[],"
                       "in_port\"" % {'br_name': self.short_name, 'ip': ip, 'mac': mac})

        #ovs-ofctl add-flow "table=105, dl_type=0x0806, nw_dst=10.10.10.1, actions=move:NXM_OF_ETH_SRC[]->NXM_OF_ETH_DST[], mod_dl_src:00:00:5E:00:02:01, load:0x2->NXM_OF_ARP_OP[], move:NXM_NX_ARP_SHA[]->NXM_NX_ARP_THA[], move:NXM_OF_ARP_SPA[]->NXM_OF_ARP_TPA[], load:0x00005e000201->NXM_NX_ARP_SHA[], load:0x0a0a0a01->NXM_OF_ARP_SPA[], in_port"
    
    def del_remote_mac(self, mac):
        ovs_ofctl("del-flows %s table=1,dl_dst=%s" % (self.short_name, mac))

    def get_tunnel_info(self, entry):
        values = {}
        values['tunnel_type'] = entry[2]
        values['dest_ip'] = entry[3]
        values['tunnel_key'] = entry[4]
        return values

    def update_remote_macs(self):
        remote_macs = {}
        unknown_dsts = set()
        tunnels = {}
        parse_ucast = True

        mac_list = vtep_ctl("list-remote-macs %s" % self.name).splitlines()
        for line in mac_list:
            if (line.find("mcast-mac-remote") != -1):
                parse_ucast = False
                continue

            entry = re.split(r'  (.*) -> (.*)/(.*) \[(.*)\]', line)
            if len(entry) != 6:
                continue

            if parse_ucast:
                remote_macs[entry[1]] = self.get_tunnel_info(entry)
            else:
                if entry[1] != "unknown-dst":
                    continue
                unknown_dsts.add(entry[3])

            tunnels[entry[3]] = self.get_tunnel_info(entry)

        old_tunnels = set(self.tunnels.keys())
        update_flood = False
        tunnels_keys = set(tunnels.keys())
        for peer_ip in tunnels_keys.difference(old_tunnels):
            self.add_tunnel(tunnels[peer_ip])
            update_flood |= True

        for peer_ip in old_tunnels.difference(tunnels_keys):
            self.del_tunnel(peer_ip)
            update_flood |= True

        global auto_flood
        if auto_flood and update_flood:
            self.update_flood()

        for mac in six.iterkeys(remote_macs):
            if (self.remote_macs.get(mac) != remote_macs[mac]):
                self.add_remote_mac(mac, remote_macs[mac]['dest_ip'])

        for mac in six.iterkeys(self.remote_macs):
            if mac not in remote_macs:
                self.del_remote_mac(mac)

        self.remote_macs = remote_macs

        if (self.unknown_dsts != unknown_dsts):
            vlog.info("unknown dst are %s" % self.unknown_dsts)
            self.unknown_dsts = unknown_dsts
            self.update_flood()

    def update_stats(self):
        # Map Open_vSwitch's "interface:statistics" to columns of
        # vtep's logical_binding_stats. Since we are using the 'interface' from
        # the logical switch to collect stats, packets transmitted from it
        # is received in the physical switch and vice versa.
        stats_map = {'tx_packets': 'packets_to_local',
                     'tx_bytes': 'bytes_to_local',
                     'rx_packets': 'packets_from_local',
                     'rx_bytes': 'bytes_from_local'}

        # Go through all the logical switch's interfaces that end with "-l"
        # and copy the statistics to logical_binding_stats.
        for interface in six.iterkeys(self.ports):
            if not interface.endswith("-l"):
                continue
            # Physical ports can have a '-' as part of its name.
            vlan, remainder = interface.split("-", 1)
            pp_name, logical = remainder.rsplit("-", 1)
            uuid = vtep_ctl("get physical_port %s vlan_stats:%s"
                            % (pp_name, vlan))
            if not uuid:
                continue

            for mapfrom, mapto in six.iteritems(stats_map):
                value = ovs_vsctl("get interface %s statistics:%s"
                                % (interface, mapfrom)).strip('"')
                vtep_ctl("set logical_binding_stats %s %s=%s"
                        % (uuid, mapto, value))

    def run(self):
        self.update_local_macs()
        self.update_remote_macs()
        self.update_stats()


def dequote(s):
    """
    If a string has single or double quotes around it, remove them.
    Make sure the pair of quotes match.
    If a matching pair of quotes is not found, return the string unchanged.
    """
    if (s[0] == s[-1]) and s.startswith(("'", '"')):
        return s[1:-1]
    return s

def get_pref_src(remote_ip):
    '''In the general case, where there are mulple ip's,get 
       the source ip according to the destination'''
    #vlog.info("remote ip = %s" %remote_ip) 
    ipdb = IPDB()
    src = None
    for route in ipdb.routes:
        if route['dst'] == 'default':
            continue
        network = netaddr.IPNetwork(route['dst'])
        ip = netaddr.IPAddress(remote_ip)
        if ip in network:
            src = route['prefsrc']
            break
    #vlog.info('source ip for %s is %s' %(remote_ip, src))
    ipdb.release()    
    return src


def get_vtep_tunnel(remote_ip):
    # Get the physical_locator record for the local tunnel end point.
    local_ip = get_pref_src(remote_ip)
    column = vtep_ctl("--columns=_uuid find physical_locator "
                      "dst_ip=%s" % local_ip)
    local = column.partition(":")[2].strip('"')
    if not local:
        return (None, None, None)

    # Get the physical_locator record for the remote tunnel end point.
    column = vtep_ctl("--columns=_uuid find physical_locator "
                      "dst_ip=%s" % remote_ip)
    remote = column.partition(":")[2].strip()
    if not remote:
        return (None, None, None)

    column = vtep_ctl("--columns=_uuid find tunnel "
                      "local=%s remote=%s" % (local, remote))
    tunnel = column.partition(":")[2].strip()

    return (local, remote, tunnel)


def create_vtep_tunnel(remote_ip):
    local, remote, tunnel = get_vtep_tunnel(remote_ip)
    if not local or not remote:
        return None

    if not tunnel:
        #vlog.info("creating tunnel record in vtep for remote_ip:%s"
        #          % remote_ip)
        tunnel = vtep_ctl("add physical_switch %s tunnels @tun -- "
                          "--id=@tun create Tunnel local=%s remote=%s"
                          % (ps_name, local, remote))
    return tunnel


def destroy_vtep_tunnel(remote_ip):
    local, remote, tunnel = get_vtep_tunnel(remote_ip)
    if tunnel:
        vlog.info("destroying tunnel record in vtep for remote_ip:%s"
                  % remote_ip)
        vtep_ctl("remove physical_switch %s tunnels %s "
                 "-- --if-exists destroy tunnel %s"
                 % (ps_name, tunnel, tunnel))


def add_bfd(remote_ip):
    # The VTEP emulator creates one OVS bridge for every logical switch.
    # Multiple logical switches can have multiple OVS tunnels to the
    # same machine (with different tunnel ids). But VTEP schema expects
    # a single BFD session between two physical locators. Therefore
    # create a separate bridge ('bfd_bridge') and create a single OVS tunnel
    # between two phsyical locators (using reference counter).
    if remote_ip in bfd_ref:
        bfd_ref[remote_ip] += 1
        return

    vlog.info("adding bfd tunnel for remote_ip:%s" % remote_ip)

    port_name = "bfd" + remote_ip
    # Don't enable BFD yet. Enabling or disabling BFD is based on
    # the controller setting a value in VTEP DB's tunnel record.
    ovs_vsctl("--may-exist add-port %s %s "
              " -- set Interface %s type=vxlan options:remote_ip=%s"
              % (bfd_bridge, port_name, port_name, remote_ip))
    bfd_ref[remote_ip] = 1

    # Ideally, we should create a 'tunnel' record in the VTEP DB here.
    # To create a 'tunnel' record, we need 2 entries in 'physical_locator'
    # table (one for local and one for remote). But, 'physical_locator'
    # can be created/destroyed asynchronously when the remote controller
    # adds/removes entries in Ucast_Macs_Remote table. To prevent race
    # conditions, pass the responsibility of creating a 'tunnel' record
    # to run_bfd() which runs more often.


def del_bfd(remote_ip):
    if remote_ip in bfd_ref:
        if bfd_ref[remote_ip] == 1:
            port_name = "bfd" + remote_ip
            vlog.info("deleting bfd tunnel for remote_ip:%s" % remote_ip)
            ovs_vsctl("--if-exists del-port %s" % port_name)
            destroy_vtep_tunnel(remote_ip)
            del bfd_ref[remote_ip]
        else:
            bfd_ref[remote_ip] -= 1


def run_bfd():
    bfd_ports = ovs_vsctl("list-ports %s" % bfd_bridge).split()
    for port in bfd_ports:
        remote_ip = ovs_vsctl("get interface %s options:remote_ip" % port)
        tunnel = create_vtep_tunnel(dequote(remote_ip))
        if not tunnel:
            continue

        bfd_params_default = {'bfd_params:enable': 'false',
                              'bfd_params:min_rx': 1000,
                              'bfd_params:min_tx': 100,
                              'bfd_params:decay_min_rx': 0,
                              'bfd_params:cpath_down': 'false',
                              'bfd_params:check_tnl_key': 'false'}
        bfd_params_values = {}

        for key, default in six.iteritems(bfd_params_default):
            column = vtep_ctl("--if-exists get tunnel %s %s"
                               % (tunnel, key))
            if not column:
                bfd_params_values[key] = default
            else:
                bfd_params_values[key] = column

        for key, value in six.iteritems(bfd_params_values):
            new_key = key.replace('_params', '')
            ovs_vsctl("set interface %s %s=%s" % (port, new_key, value))

        bfd_status = ['bfd_status:state', 'bfd_status:forwarding',
                      'bfd_status:diagnostic', 'bfd_status:remote_state',
                      'bfd_status:remote_diagnostic']
        for key in bfd_status:
            value = ovs_vsctl("--if-exists get interface %s %s" % (port, key))
            if value:
                vtep_ctl("set tunnel %s %s=%s" % (tunnel, key, value))
            else:
                new_key = key.replace('bfd_status:', '')
                vtep_ctl("remove tunnel %s bfd_status %s" % (tunnel, new_key))

        vtep_ctl("set tunnel %s bfd_status:enabled=%s"
                 % (tunnel, bfd_params_values['bfd_params:enable']))

        # Add the defaults as described in VTEP schema to make it explicit.
        bfd_lconf_default = {'bfd_config_local:bfd_dst_ip': '169.254.1.0',
                             'bfd_config_local:bfd_dst_mac':
                                    '00:23:20:00:00:01'}
        for key, value in six.iteritems(bfd_lconf_default):
            vtep_ctl("set tunnel %s %s=%s" % (tunnel, key, value))

        # bfd_config_remote options from VTEP DB should be populated to
        # corresponding OVS DB values.
        bfd_dst_ip = vtep_ctl("--if-exists get tunnel %s "
                              "bfd_config_remote:bfd_dst_ip" % (tunnel))
        if not bfd_dst_ip:
            bfd_dst_ip = "169.254.1.1"

        bfd_dst_mac = vtep_ctl("--if-exists get tunnel %s "
                              "bfd_config_remote:bfd_dst_mac" % (tunnel))
        if not bfd_dst_mac:
            bfd_dst_mac = "00:23:20:00:00:01"

        ovs_vsctl("set interface %s bfd:bfd_dst_ip=%s "
                  "bfd:bfd_remote_dst_mac=%s bfd:bfd_local_dst_mac=%s"
                  % (port, bfd_dst_ip,
                  bfd_lconf_default['bfd_config_local:bfd_dst_mac'],
                  bfd_dst_mac))


def add_binding(binding, ls):
    vlog.info("adding binding %s" % binding)

    vlan, pp_name = binding.split("-", 1)
    pbinding = binding + "-p"
    lbinding = binding + "-l"

    # Create a patch port that connects the VLAN+port to the lswitch.
    # Do them as two separate calls so if one side already exists, the
    # other side is created.
    ovs_vsctl("add-port %s %s "
              " -- set Interface %s type=patch options:peer=%s"
              % (ps_name, pbinding, pbinding, lbinding))
    ovs_vsctl("add-port %s %s "
              " -- set Interface %s type=patch options:peer=%s"
              % (ls.short_name, lbinding, lbinding, pbinding))

    port_no = ovs_vsctl("get Interface %s ofport" % pp_name)
    patch_no = ovs_vsctl("get Interface %s ofport" % pbinding)
    vlan_ = vlan.lstrip('0')
    if vlan_:
        ovs_ofctl("add-flow %s in_port=%s,dl_vlan=%s,action=strip_vlan,%s"
                  % (ps_name, port_no, vlan_, patch_no))
        ovs_ofctl("add-flow %s in_port=%s,action=mod_vlan_vid:%s,%s"
                  % (ps_name, patch_no, vlan_, port_no))
    else:
        ovs_ofctl("add-flow %s in_port=%s,action=%s"
                  % (ps_name, port_no, patch_no))
        ovs_ofctl("add-flow %s in_port=%s,action=%s"
                  % (ps_name, patch_no, port_no))

    # Create a logical_bindings_stats record.
    if not vlan_:
        vlan_ = "0"
    vtep_ctl("set physical_port %s vlan_stats:%s=@stats -- "
             "--id=@stats create logical_binding_stats packets_from_local=0"
             % (pp_name, vlan_))

    ls.add_lbinding(lbinding)
    Bindings[binding] = ls.name


def del_binding(binding, ls):
    vlog.info("removing binding %s" % binding)

    vlan, pp_name = binding.split("-", 1)
    pbinding = binding + "-p"
    lbinding = binding + "-l"

    port_no = ovs_vsctl("get Interface %s ofport" % pp_name)
    patch_no = ovs_vsctl("get Interface %s ofport" % pbinding)
    vlan_ = vlan.lstrip('0')
    if vlan_:
        ovs_ofctl("del-flows %s in_port=%s,dl_vlan=%s"
                  % (ps_name, port_no, vlan_))
        ovs_ofctl("del-flows %s in_port=%s" % (ps_name, patch_no))
    else:
        ovs_ofctl("del-flows %s in_port=%s" % (ps_name, port_no))
        ovs_ofctl("del-flows %s in_port=%s" % (ps_name, patch_no))

    ls.del_lbinding(lbinding)

    # Destroy the patch port that connects the VLAN+port to the lswitch
    ovs_vsctl("del-port %s %s -- del-port %s %s"
              % (ps_name, pbinding, ls.short_name, lbinding))

    # Remove the record that links vlan with stats in logical_binding_stats.
    vtep_ctl("remove physical_port %s vlan_stats %s" % (pp_name, vlan))

    del Bindings[binding]


def handle_physical():
    switch_list = vtep_ctl("list-ls").splitlines()
    for ls_name in switch_list:
        if ls_name not in Lswitches.keys():
            Lswitches[ls_name] = Logical_Switch(ls_name)
    removed_switches = list()
    for ls_name in Lswitches.keys():
        if ls_name not in switch_list:
            removed_switches.append(ls_name)
    # Gather physical ports except the patch ports we created
    ovs_ports = ovs_vsctl("list-ports %s" % ps_name).split()
    ovs_port_set = set([port for port in ovs_ports if port[-2:] != "-p"])

    vtep_pp_set = set(vtep_ctl("list-ports %s" % ps_name).split())

    for pp_name in ovs_port_set.difference(vtep_pp_set):
        vlog.info("adding %s to %s" % (pp_name, ps_name))
        vtep_ctl("add-port %s %s" % (ps_name, pp_name))

    for pp_name in vtep_pp_set.difference(ovs_port_set):
        vlog.info("deleting %s from %s" % (pp_name, ps_name))
        vtep_ctl("del-port %s %s" % (ps_name, pp_name))

    new_bindings = set()
    for pp_name in vtep_pp_set:
        binding_set = set(vtep_ctl("list-bindings %s %s"
                                   % (ps_name, pp_name)).splitlines())
        switch_list = vtep_ctl("list-ls").splitlines()
        for b in binding_set:
            vlan, ls_name = b.split()

            binding = "%s-%s" % (vlan, pp_name)
            ls = Lswitches[ls_name]
            new_bindings.add(binding)

            if binding in Bindings:
                if Bindings[binding] == ls_name:
                    continue
                else:
                    del_binding(binding, Lswitches[Bindings[binding]])

            add_binding(binding, ls)

    dead_bindings = set(Bindings.keys()).difference(new_bindings)
    for binding in dead_bindings:
        ls_name = Bindings[binding]
        ls = Lswitches[ls_name]

        del_binding(binding, ls)

    for ls_name in removed_switches:
        ls = Lswitches[ls_name]
        if not len(ls.ports) and not ls.tunnels:
            ls.cleanup_ls()
            ovs_vsctl("del-br %s" % Lswitches[ls_name].short_name)
            vtep_ctl("clear-local-macs %s" % Lswitches[ls_name].name)
            del Lswitches[ls_name]

def list_tunnel_ips():
    return vtep_ctl("get physical_switch %s tunnel_ips"
                          % ps_name).strip('[]').replace('\"','').split(",")


def setup(tunnel_ips):
    if  not tunnel_ips[0]:
        ovs.util.ovs_fatal(0, "at least one 'tunnel_ips' should be set", vlog)

    global Tunnel_Ips
    if Tunnel_Ips == tunnel_ips:
        return
   
    vlog.info("switch tunnel_ips modified new tunnel_ips %s" % tunnel_ips)
    global Lswitches
    if Lswitches.keys():
        vlog.info("cleaning old switch entries for %s" % Lswitches.keys())
        for ls_name in Lswitches.keys():
            ls = Lswitches[ls_name]
            if not len(ls.ports) and not ls.tunnels:
                ls.cleanup_ls()
                ovs_vsctl("del-br %s" % Lswitches[ls_name].short_name)
                vlog.info("cleaning switch %s" % ls_name)
                vtep_ctl("clear-local-macs %s" % Lswitches[ls_name].name)
                del Lswitches[ls_name]
        Lswitches = {}
         
    Tunnel_Ips = tunnel_ips

    br_list = ovs_vsctl("list-br").split()
    if (ps_name not in br_list):
        ovs.util.ovs_fatal(0, "couldn't find OVS bridge %s" % ps_name, vlog)

    global ps_type
    ps_type = ovs_vsctl("get Bridge %s datapath_type" % ps_name).strip('"')

    call_prog("vtep-ctl", ["set", "physical_switch", ps_name,
                           'description="OVS VTEP Emulator"'])

   
    ovs_ofctl("del-flows %s" % ps_name)

    # Remove any logical bridges from the previous run
    for br in br_list:
        if ovs_vsctl("br-get-external-id %s vtep_logical_switch"
                     % br) == "true":
            # Remove the remote side of any logical switch
            ovs_ports = ovs_vsctl("list-ports %s" % br).split()
            for port in ovs_ports:
                port_type = ovs_vsctl("get Interface %s type"
                                      % port).strip('"')
                if port_type != "patch":
                    continue

                peer = ovs_vsctl("get Interface %s options:peer"
                                 % port).strip('"')
                if (peer):
                    ovs_vsctl("del-port %s" % peer)

            ovs_vsctl("del-br %s" % br)

        if br == bfd_bridge:
            bfd_ports = ovs_vsctl("list-ports %s" % bfd_bridge).split()
            for port in bfd_ports:
                remote_ip = ovs_vsctl("get interface %s options:remote_ip"
                                      % port)
                destroy_vtep_tunnel(dequote(remote_ip))

            ovs_vsctl("del-br %s" % br)

    if ps_type:
        ovs_vsctl("add-br %s -- set Bridge %s datapath_type=%s"
                  % (bfd_bridge, bfd_bridge, ps_type))
    else:
        ovs_vsctl("add-br %s" % bfd_bridge)

    # Remove local-mac entries from the previous run.  Otherwise, if a vlan
    # binding is removed while the emulator is *not* running, the corresponding
    # local-mac entries are never cleaned up.
    vtep_ls = set(vtep_ctl("list-ls").split())
    for ls_name in vtep_ls:
        vtep_ctl("clear-local-macs %s" % ls_name)

def add_to_exe_path(path, as_prefix=True):
    if as_prefix:
        os.environ["PATH"] = path + os.pathsep + os.environ["PATH"]
    else:
        os.environ["PATH"] += os.pathsep + path

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("ps_name", metavar="PS-NAME",
                        help="Name of physical switch.")
    parser.add_argument("--root-prefix", metavar="DIR",
                        help="Use DIR as alternate root directory"
                        " (for testing).")
    parser.add_argument("--db", metavar="DATABASE",
                        help="connect to DATABASE")
    parser.add_argument("--version", action="version",
                        version="%s %s" % (ovs.util.PROGRAM_NAME, VERSION))
    parser.add_argument('--no_fragment', action='store_true',
                        help="allow path MTU discovery ,default false")
    parser.add_argument('--auto_flood', action='store_true',
                        help="dont use unknown-dst for flooding")
    parser.add_argument('--arp_response', action='store_true',
                        help="generate arp_responce flow for known remote_macs")

    ovs.vlog.add_args(parser)
    ovs.daemon.add_args(parser)
    args = parser.parse_args()
    ovs.vlog.handle_args(args)
    ovs.daemon.handle_args(args)

    add_to_exe_path(os.path.dirname(os.path.realpath(__file__)))

    global root_prefix
    if args.root_prefix:
        root_prefix = args.root_prefix

    global ps_name
    ps_name = args.ps_name

    global database
    if args.db:
        database = "--db=%s" % args.db
    global auto_flood
    if args.auto_flood:
        auto_flood = args.auto_flood
    global df_fragment
    if args.no_fragment:
        df_fragment = False
    global arp_responder
    if args.arp_response:
        arp_responder= args.arp_response

    ovs.daemon.daemonize()

    ovs.unixctl.command_register("exit", "", 0, 0, unixctl_exit, None)
    error, unixctl = ovs.unixctl.server.UnixctlServer.create(None,
                                                             version=VERSION)
    if error:
        ovs.util.ovs_fatal(error, "could not create unixctl server", vlog)


    while True:
        setup(list_tunnel_ips())
        
        unixctl.run()
        if exiting:
            break
        
        handle_physical()

        for ls_name, ls in six.iteritems(Lswitches):
            ls.run()

        run_bfd()

        poller = ovs.poller.Poller()
        unixctl.wait(poller)
        poller.timer_wait(1000)
        poller.block()

    unixctl.close()

if __name__ == '__main__':
    try:
        main()
    except SystemExit:
        # Let system.exit() calls complete normally
        raise
    except:
        vlog.exception("traceback")
        sys.exit(ovs.daemon.RESTART_EXIT_CODE)
